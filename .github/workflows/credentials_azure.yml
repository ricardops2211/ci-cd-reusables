name: credentials_azure

on:
  workflow_call:
    inputs:
      vault_addr:
        description: "Dirección de Vault"
        required: false
        type: string
        default: "http://127.0.0.1:8200"
      secret_path:
        description: "Ruta del secreto en Vault"
        required: false
        type: string
        default: "secret/azure"
      field:
        description: "Campo con el Databricks PAT"
        required: false
        type: string
        default: "DATABRICKS_TOKEN"
    secrets:
      VAULT_TOKEN:
        required: true
    outputs:
      # Exponemos en minúsculas y MAYÚSCULAS por compatibilidad
      databricks_token:
        description: "Databricks PAT (lowercase)"
        value: ${{ jobs.get-token.outputs.databricks_token }}
      DATABRICKS_TOKEN:
        description: "Databricks PAT (UPPERCASE)"
        value: ${{ jobs.get-token.outputs.databricks_token }}
      databricks_token_len:
        description: "Longitud del token (debug)"
        value: ${{ jobs.get-token.outputs.databricks_token_len }}

jobs:
  get-token:
    runs-on: self-hosted
    outputs:
      databricks_token: ${{ steps.get-creds.outputs.token }}
      databricks_token_len: ${{ steps.get-creds.outputs.token_len }}
    steps:
      - name: Login en Vault
        shell: bash
        env:
          VAULT_ADDR: ${{ inputs.vault_addr }}
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
          VAULT_SKIP_VERIFY: "true"
          PATH: ${{ env.PATH }}:/home/gha-runner/vault
        run: |
          set -Eeuo pipefail
          vault --version
          vault login "$VAULT_TOKEN" >/dev/null
          vault token lookup

      - name: Obtener token de Databricks
        id: get-creds
        shell: bash
        env:
          VAULT_ADDR: ${{ inputs.vault_addr }}
          VAULT_SKIP_VERIFY: "true"
          PATH: ${{ env.PATH }}:/home/gha-runner/vault
        run: |
          set -Eeuo pipefail
          dbToken="$(vault kv get -field='${{ inputs.field }}' '${{ inputs.secret_path }}')"
          # Guardias
          if [ -z "$dbToken" ]; then
            echo "❌ Vault devolvió token vacío"; exit 1
          fi

          # Mask + outputs del step
          echo "::add-mask::$dbToken"
          echo "token=$dbToken" >> "$GITHUB_OUTPUT"
          echo "token_len=${#dbToken}" >> "$GITHUB_OUTPUT"

          # (Opcional) export local por si más steps lo quisieran
          echo "DATABRICKS_TOKEN=$dbToken" >> "$GITHUB_ENV"
