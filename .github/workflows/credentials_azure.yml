name: credentials-azure

on:
  workflow_call:
    inputs:
      vault_addr:   { type: string,  default: "http://127.0.0.1:8200" }
      skip_verify:  { type: boolean, default: true }
    secrets:
      VAULT_TOKEN:  { required: true }
    outputs:
      # Exportamos el TOKEN doble-base64 para que GitHub no lo censure
      databricks_token_b64:
        description: "Databricks PAT doble-base64 para transporte seguro como output"
        value: ${{ jobs.creds.outputs.dbx_token_b64 }}

jobs:
  creds:
    runs-on: self-hosted
    outputs:
      dbx_token_b64: ${{ steps.get.outputs.dbx_token_b64 }}
    steps:
      - name: Añadir bin de Vault al PATH
        shell: bash
        run: echo "/home/gha-runner/vault" >> "$GITHUB_PATH"

      - name: Login en Vault
        shell: bash
        env:
          VAULT_ADDR: ${{ inputs.vault_addr }}
          VAULT_SKIP_VERIFY: ${{ inputs.skip_verify }}
        run: |
          set -Eeuo pipefail
          vault --version
          vault login "${{ secrets.VAULT_TOKEN }}" >/dev/null
          vault token lookup

      - name: Obtener token de Databricks y publicarlo doble-base64
        id: get
        shell: bash
        env:
          VAULT_ADDR: ${{ inputs.vault_addr }}
          VAULT_SKIP_VERIFY: ${{ inputs.skip_verify }}
        run: |
          set -Eeuo pipefail
          dbToken="$(vault kv get -field=DATABRICKS_TOKEN secret/azure)"
          echo "::add-mask::${dbToken}"

          # Doble Base64 robusto (sin saltos de línea)
          enc1="$(printf %s "$dbToken" | base64 | tr -d '\n')"
          enc2="$(printf %s "$enc1"   | base64 | tr -d '\n')"

          echo "dbx_token_b64=${enc2}" >> "$GITHUB_OUTPUT"
